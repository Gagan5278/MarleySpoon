//
//  RecipeListViewController.swift
//  MarleySpoon
//
//  Created Gagan Vishal on 2020/01/25.
//  Copyright Â© 2020 Gagan Vishal. All rights reserved.
//
//  Template generated by Gagan Vishal @gagan5278
//

import UIKit

class RecipeListViewController: UIViewController {
    ///cell identifier
    let cellIdentifier = "recipeListCellIdentifier"
    //IBOutlets
    @IBOutlet weak var recipeListTableView: UITableView!
    @IBOutlet weak var loaderIndicator: UIActivityIndicatorView!
    /// UIRefreshControl for refreshing list
    private var pullRefreshControl = UIRefreshControl()
    ///RecipeListPresenterProtocol
    var presenter: RecipeListPresenterProtocol?
    //array to store list of recipe items
    var arrayOfRecipeItems: [RecipeModel] = []
    //table row height
    let tableRowHeight: CGFloat = 170.0
    //MARK:- View Controller life cycle
    override func viewDidLoad() {
        super.viewDidLoad()
        //1.
        self.title = "Recipe Available"
        //2.
        addRefreshControler()
        //3.
        self.fetchList(action: nil)
    }
    
    //MARK:- Add refresh control on UITableView
    fileprivate func addRefreshControler() {
        pullRefreshControl.addTarget(self, action: #selector(refreshListData(_:)), for: .valueChanged)
        recipeListTableView.refreshControl = pullRefreshControl
    }
    
    //MARK: Pull to refrsh Action
    @objc private func refreshListData(_ sender: Any) {
        pullRefreshControl.beginRefreshing()
        self.fetchList(action: nil)
    }
    
    //MARK:- Fetch recipe list from server
    private func fetchList(action: UIAlertAction?) {
        if Reachability.shared.isConnected {
            self.presenter?.fetchRecipeList()
        }
        else {
            self.presenter?.showAlert(with: Constants.Internet_Availibility.networkErrorTitle, message: Constants.Internet_Availibility.netowrkErrorMessage, view: self, with: "OK", withCallback: nil)
        }
    }
    
    //MARK:- End Pull to refrsh animation
    func endRefreshingIfAvailable() {
        if self.pullRefreshControl.isRefreshing {
            self.pullRefreshControl.endRefreshing()
        }
    }
}

//MARK:- UITableView Datasource
extension RecipeListViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.arrayOfRecipeItems.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: cellIdentifier, for: indexPath) as? RecipeListTableCell else {
            return UITableViewCell()
        }
        cell.recipeModel = self.arrayOfRecipeItems[indexPath.row]
        return cell
    }    
}

//MARK:- UITableView Delegate
extension RecipeListViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return self.tableRowHeight
    }
    
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        if let customCell = cell as? RecipeListTableCell {
            //1. start activity indicator for cell image
            customCell.logoLoaderIndicator.startAnimating()
            //2. Image download handler
            customCell.recipeLogoImageView.image = UIImage(systemName: "square.grid.4x3.fill") ///default image on cell logo
            ImageDownloadManager.sharedInsatnce.downloadUserAvtarImage(at: indexPath, avatar_url: APIRouter.thumbnailImageFor(url: customCell.recipeModel.photo.url!).urlString) { (image, urlString, indexpath, error) in
                DispatchQueue.main.async {
                    if let cell = tableView.cellForRow(at: indexpath) as? RecipeListTableCell {
                        cell.setRecipe(logo: image)
                    }
                }
            }
        }
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        self.presenter?.pushToDetailViewController(view: self, model: self.arrayOfRecipeItems[indexPath.row])
        tableView.deselectRow(at: indexPath, animated: false)
    }
}

//MARK:- RecipeListViewProtocol implementation
extension RecipeListViewController: RecipeListViewProtocol {
    
    func didFinishLoading() {
        self.loaderIndicator.stopAnimating()
    }
    
    func didStartLoading() {
        self.loaderIndicator.startAnimating()
    }
    
    func didRecieve(error: APIError) {
        presenter?.showAlert(with: "Error", message: error.localizedDescription, view: self, with: "OK", withCallback: nil)
    }
    
    func didFetchRecipe(item: [RecipeModel]) {
        //1. assign values in array
        self.arrayOfRecipeItems = item
        //2. reload table view
        self.recipeListTableView.reloadData()
        //3. end refrshing if available
        self.endRefreshingIfAvailable()
    }
}

