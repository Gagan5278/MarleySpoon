//
//  RecipeListPresenter.swift
//  MarleySpoon
//
//  Created Gagan Vishal on 2020/01/25.
//  Copyright Â© 2020 Gagan Vishal. All rights reserved.
//
//  Template generated by Gagan Vishal @gagan5278
//

import UIKit

class RecipeListPresenter: RecipeListPresenterProtocol {
    weak private var view: RecipeListViewProtocol?
    var interactor: RecipeListInteractorInputProtocol?
    private let router: RecipeListWireframeProtocol

    init(interface: RecipeListViewProtocol, interactor: RecipeListInteractorInputProtocol?, router: RecipeListWireframeProtocol) {
        self.view = interface
        self.interactor = interactor
        self.router = router
    }

    //MARK:- 
    func fetchRecipeList() {
        //1. start activity indicator
        view?.didStartLoading()
        //2. call to interactor fetch list from server
        self.interactor?.fetchRecipeListFromServer()
    }
    
    func showAlert(with title: String, message: String, view: RecipeListViewProtocol, with buttonTitle: String, withCallback callBack: ((UIAlertAction) -> Void)?) {
        self.router.showAlert(with: title, message: message, view: view, buttonTitle: buttonTitle, withCallback: callBack)
    }
    
    //MARK:-
    func pushToDetailViewController(view: RecipeListViewProtocol, model: RecipeModel) {
        self.router.pushToViewController(view: view, model: model)
    }
}

//MARK: RecipeListInteractorOutputProtocol Extension
extension RecipeListPresenter: RecipeListInteractorOutputProtocol {
    func onRecieveServer(error: APIError) {
        self.view?.didFinishLoading()
        self.view?.didRecieve(error: error)
    }
    
    func onRecieveRecipe(items: [RecipeModel]) {
        self.view?.didFetchRecipe(item: items)
        self.view?.didFinishLoading()
    }
}
